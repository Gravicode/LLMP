using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;

namespace Connectors.AI.PaLM.Helper
{

    /// <summary> The name and arguments of a function that should be called, as generated by the model. </summary>
    public partial class FunctionCall
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FunctionCall"/>. </summary>
        /// <param name="name"> The name of the function to call. </param>
        /// <param name="arguments">
        /// The arguments to call the function with, as generated by the model in JSON format.
        /// Note that the model does not always generate valid JSON, and may hallucinate parameters
        /// not defined by your function schema. Validate the arguments in your code before calling
        /// your function.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FunctionCall(string name, string arguments, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Arguments = arguments;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="FunctionCall"/> for deserialization. </summary>
        internal FunctionCall()
        {
        }

        /// <summary> The name of the function to call. </summary>
        public string Name { get; set; }
        /// <summary>
        /// The arguments to call the function with, as generated by the model in JSON format.
        /// Note that the model does not always generate valid JSON, and may hallucinate parameters
        /// not defined by your function schema. Validate the arguments in your code before calling
        /// your function.
        /// </summary>
        public string Arguments { get; set; }
    }
    /// <summary>
    /// The collection of predefined behaviors for handling request-provided function information in a chat completions
    /// operation.
    /// </summary>
    internal readonly partial struct FunctionCallPreset : IEquatable<FunctionCallPreset>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FunctionCallPreset"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FunctionCallPreset(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutoValue = "auto";
        private const string NoneValue = "none";

        /// <summary>
        /// Specifies that the model may either use any of the functions provided in this chat completions request or
        /// instead return a standard chat completions response as if no functions were provided.
        /// </summary>
        public static FunctionCallPreset Auto { get; } = new FunctionCallPreset(AutoValue);
        /// <summary>
        /// Specifies that the model should not respond with a function call and should instead provide a standard chat
        /// completions response. Response content may still be influenced by the provided function information.
        /// </summary>
        public static FunctionCallPreset None { get; } = new FunctionCallPreset(NoneValue);
        /// <summary> Determines if two <see cref="FunctionCallPreset"/> values are the same. </summary>
        public static bool operator ==(FunctionCallPreset left, FunctionCallPreset right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FunctionCallPreset"/> values are not the same. </summary>
        public static bool operator !=(FunctionCallPreset left, FunctionCallPreset right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FunctionCallPreset"/>. </summary>
        public static implicit operator FunctionCallPreset(string value) => new FunctionCallPreset(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FunctionCallPreset other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FunctionCallPreset other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
    // CUSTOM CODE NOTE:
    //   This manages the intended internal visibility of the response format, which is instead handled by separate
    //   methods in .NET.

    internal readonly partial struct FunctionCallPreset : IEquatable<FunctionCallPreset>
    { }
    public partial class FunctionCall
    {
        // CUSTOM CODE NOTE:
        //   These changes facilitate the reuse of this class in streaming scenarios.

        /// <summary> Initializes a new instance of FunctionCall. </summary>
        /// <param name="name"> The name of the function to call. </param>
        /// <param name="arguments">
        /// The arguments to call the function with, as generated by the model in JSON format.
        /// Note that the model does not always generate valid JSON, and may hallucinate parameters
        /// not defined by your function schema. Validate the arguments in your code before calling
        /// your function.
        /// </param>
        public FunctionCall(string name, string arguments)
        {
            // Custom code note: we suppress null checks for deserialization reuse in streaming scenarios
            // Argument.AssertNotNull(name, nameof(name));
            // Argument.AssertNotNull(arguments, nameof(arguments));

            Name = name;
            Arguments = arguments;
        }
    }
    public partial class FunctionDefinition
    {
        // CUSTOM CODE NOTES:
        //   - These customizations allow "init" style use of the definition via a public default constructor and
        //     accessible setters
        //   - These changes merge "presets" into static class members for ease of use

        /// <inheritdoc cref="FunctionCallPreset.Auto"/>
        public static FunctionDefinition Auto
            = CreatePredefinedFunctionDefinition(FunctionCallPreset.Auto.ToString());

        /// <inheritdoc cref="FunctionCallPreset.None"/>
        public static FunctionDefinition None
            = CreatePredefinedFunctionDefinition(FunctionCallPreset.None.ToString());

        /// <summary>
        /// Initializes a new instance of FunctionDefinition.
        /// </summary>
        public FunctionDefinition()
        { }

        /// <summary> The name of the function to be called. </summary>
        public string Name { get; set; }

        internal bool IsPredefined { get; set; } = false;

        internal static FunctionDefinition CreatePredefinedFunctionDefinition(string functionName)
            => new FunctionDefinition(functionName)
            {
                IsPredefined = true
            };
    }
    /// <summary> The definition of a caller-specified function that chat completions may invoke in response to matching user input. </summary>
    public partial class FunctionDefinition
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FunctionDefinition"/>. </summary>
        /// <param name="name"> The name of the function to be called. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public FunctionDefinition(string name)
        {
            //Argument.AssertNotNull(name, nameof(name));

            Name = name;
        }

        /// <summary> Initializes a new instance of <see cref="FunctionDefinition"/>. </summary>
        /// <param name="name"> The name of the function to be called. </param>
        /// <param name="description">
        /// A description of what the function does. The model will use this description when selecting the function and
        /// interpreting its parameters.
        /// </param>
        /// <param name="parameters"> The parameters the function accepts, described as a JSON Schema object. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FunctionDefinition(string name, string description, BinaryData parameters, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Description = description;
            Parameters = parameters;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }
        /// <summary>
        /// A description of what the function does. The model will use this description when selecting the function and
        /// interpreting its parameters.
        /// </summary>
        public string Description { get; set; }
        /// <summary>
        /// The parameters the function accepts, described as a JSON Schema object.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Parameters { get; set; }
    }
}
