@page "/image-generator-page"
@using Betalgo.Ranul.OpenAI.ObjectModels
@inject AppState AppState
@inject ISnackbar Snackbar
@inject ImageGeneratorService ChatSvc

<h3>Image Generator Page</h3>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm>
            <MudTextField T="int" @bind-Value="@Number" Label="Number of Images" Required="true" RequiredError="Number is required!" />
           <MudSelect @bind-Value="@SelectedModel" T="string" Label="Image Model" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@(AppConstants.ImageModel2)" />
                <MudSelectItem Value="@(AppConstants.ImageModel3)" />
            </MudSelect> 
            <MudSelect @bind-Value="@ImageSize" T="string" Label="Image Size" AnchorOrigin="Origin.BottomCenter">
                    @if (SelectedModel == AppConstants.ImageModel2)
                    {
                        <MudSelectItem Value="@(StaticValues.ImageStatics.Size.Size256)" />
                        <MudSelectItem Value="@(StaticValues.ImageStatics.Size.Size512)" />
                        <MudSelectItem Value="@(StaticValues.ImageStatics.Size.Size1024)" />
                    }
                    else
                    {
                        <MudSelectItem Value="@(StaticValues.ImageStatics.Size.Size1792x1024)" />
                        <MudSelectItem Value="@(StaticValues.ImageStatics.Size.Size1024x1792)" />
                        <MudSelectItem Value="@(StaticValues.ImageStatics.Size.Size1024)" />
                    }
                </MudSelect> 
            <MudSelect @bind-Value="@ImageStyle" T="string" Label="Image Style" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@(ImageStyles.Natural)" />
                <MudSelectItem Value="@(ImageStyles.Vivid)" />
            </MudSelect>
              <MudTextField T="string" Lines="5" @bind-Text="Prompt" Label="Your Prompt" Required="true" RequiredError="Prompt is required!" />
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Success" DisableElevation="true" OnClick="Reset" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="Execute" Class="mx-2">Execute</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Info" DisableElevation="true" OnClick="Load" Class="mx-2">Load</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Warning" DisableElevation="true" OnClick="Save" Class="mx-2">Save</MudButton>
    
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Info ({infos.Count})")</MudText>
            @foreach (var error in infos)
            {
                <MudText Color="@Color.Info">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="12">
        @if (_isReceivingResponse)
        {
            <MudBadge Origin="Origin.TopLeft" Overlap="true" Color="Color.Secondary"
                      Icon="@Icons.Material.Filled.Lightbulb" Class="full-width">
                <MudPaper Class="pa-6" Elevation="3">
                    <Loading />
                </MudPaper>
            </MudBadge>
        }
        
    </MudItem>
    @if (Result.Count > 0)
        {
            @foreach (var item in Result)
            {
               <MudItem xs="12" sm="12">
                     <MudImage Height="480" Src="@item.Url" Alt="generated" Elevation="25" Class="rounded-lg" ObjectFit="ObjectFit.Contain" ></MudImage> 
               </MudItem>
                <MudItem xs="12" sm="12">
                <MudPaper Class="pa-4">    
                    <MudButton @onclick="()=>Delete(item)" Color="Color.Warning">Delete</MudButton>
                    <MudButton @onclick="()=>Download(item)" Color="Color.Primary">Save</MudButton>
                </MudPaper>
               </MudItem>
               
            }
        }
</MudGrid>
@code {
    public string ImageSize { get; set; } = StaticValues.ImageStatics.Size.Size1024;
    public string ImageStyle { get; set; } = ImageStyles.Vivid;
    public int Number { get; set; } = 1;
    public List<ImageModel> Result { get; set; } = new();
    public string SelectedModel { set; get; } = AppConstants.ImageModel3;
    string Status = string.Empty;
    bool IsLoading = false;
    bool _isReceivingResponse = false;

    List<string> infos = new();
    string Prompt { set; get; } = "Innovate a movie poster for a film of a genre of your choosing, such as sci-fi, and give it a title, like ‘Space World’";
    protected override async Task OnInitializedAsync()
    {

        //await Reset();
    }
    async Task Delete(ImageModel item)
    {
        Result.Remove(item);
    }
    HttpClient client = new();
    async Task Download(ImageModel item)
    {
        var bytes = await client.GetByteArrayAsync(item.Url);
        var ms = new MemoryStream(bytes);
        var Image = new Bitmap(ms);       
        var Dir = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
        var fname = $"img_gen_{DateTime.Now.ToString("dd_MMM_yyyy_HH_mm_ss")}.png";
        fname = Path.Combine(Dir, fname);
        Image.Save(fname, System.Drawing.Imaging.ImageFormat.Png);
        Snackbar.Add($"File downloaded: {fname}", Severity.Success);
    }
    async Task Save()
    {
        var Dir = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
        var fName = Path.Combine(Dir, $"image_{DateTime.Now.ToString("dd_MMM_yyyy_HH_mm_ss")}.json");
        var data = new ImageGenData() { Completion = Prompt, ModelId = "dall-e" };
        var json = JsonConvert.SerializeObject(data, Formatting.Indented);
        File.WriteAllText(fName,json);
        Snackbar.Add($"File saved: {fName}", Severity.Success);
    }
    async Task Load()
    {
        var Dir = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
        try
        {
            int size = -1;
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.InitialDirectory = Dir;
            openFileDialog1.Title = "Open Json Data";
            openFileDialog1.Filter = "json files (*.json)|*.json";
            var result = openFileDialog1.ShowDialog(); // Show the dialog.
            if (result ==   System.Windows.Forms.DialogResult.OK) // Test result.
            {
                string file = openFileDialog1.FileName;
                try
                {
                    var text = File.ReadAllText(file);
                    var data = JsonConvert.DeserializeObject<ImageGenData>(text);
                    if (data != null)
                    {

                        Prompt = data.Completion;

                        Snackbar.Add("File is loaded.", Severity.Info);
                    }
                    else
                    {
                        Snackbar.Add("File cannot be opened.", Severity.Warning);
                    }
                }
                catch (IOException)
                {
                }
            }
            else
            {
                infos.Add("Only support json data");
            }
            Console.WriteLine(size); // <-- Shows file size in debugging mode.
            Console.WriteLine(result); // <-- For debugging use.




        }
        catch (Exception ex)
        {
            Snackbar.Add($"File load error: {ex}", Severity.Error);
            // The user canceled or something went wrong
        }
    }

    async Task Reset()
    {
        Result.Clear();
        Prompt=string.Empty;        
        infos.Add($"{DateTime.Now} - Generator is ready.");
        Snackbar.Add($"{DateTime.Now} - Generator is ready.", Severity.Info);
    }

    private async Task OnKeyUpAsync(KeyboardEventArgs args)
    {
        if (args is { Key: "Enter", ShiftKey: false })
        {
            await Execute();
        }
    }
    async Task Execute()
    {
        if (IsLoading) return;
        if (!AppConstants.InternetOK)
        {
            Snackbar.Add("Please check internet connection.", Severity.Error);
            return;

        }
        if (string.IsNullOrEmpty(Prompt))
        {
            Snackbar.Add("Please type a prompt first.", Severity.Warning);
            return;
        }
        _isReceivingResponse = true;
        try
        {
            var res = await ChatSvc.GenerateImageAsync(Prompt, Number, ImageSize, SelectedModel, ImageStyle);
            Result = res.Result;
            if (!string.IsNullOrEmpty(res.Message))
            {
                Snackbar.Add(res.Message, Severity.Warning);
            }
            infos.Add("image generated..");
        }
        catch (Exception ex)
        {
            Snackbar.Add("error response prompt:" + ex, Severity.Warning);
            Console.WriteLine("error response prompt:" + ex);

        }
        finally
        {
            _isReceivingResponse = false;
        }
    }


}
