@page "/chat-page"
@inject AppState AppState
@inject ISnackbar Snackbar
@inject ChatService ChatSvc
@inject AzureBlobHelper Blob

<h3>Chat Completion</h3>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm>
                <MudTextField T="string" Lines="5" @bind-Text="SystemMessage" Label="System Message" Required="true" RequiredError="System Message is required!" />
                <MudSelect T="string" @bind-Value="@SelectedModel" Label="Models" AnchorOrigin="Origin.BottomCenter">
                    @foreach(var model in AppConstants.ModelOpenAIs)
                    {
                        <MudSelectItem Value="@model" />
                    }
                </MudSelect>
                <MudSlider ValueLabel="true" @bind-Value="@ChatSvc.Setting.Temperature" Min="0" Max="2" Step="0.1">Temperature</MudSlider>
                <MudSlider ValueLabel="true" @bind-Value="@ChatSvc.Setting.TopP" Min="0" Step="0.1" Max="1">Top-P</MudSlider>
                <MudSlider ValueLabel="true" @bind-Value="@ChatSvc.Setting.MaxTokens" Min="1" Max="4096">Max Token</MudSlider>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Success" DisableElevation="true" OnClick="Reset" Class="mx-2">Reset</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Info ({infos.Count})")</MudText>
            @foreach (var error in infos)
            {
                <MudText Color="@Color.Info">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center">
    <MudItem id="answers" xs="12" Class="overflow-x-auto">
        <MudStack Reverse="@IsReversed" Spacing="12">
            @foreach (var item in Items)
            {
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Start" Spacing="4">
                    <MudBadge Origin="Origin.TopLeft" Overlap="true" Color="Color.Secondary"
                          Icon="@Icons.Material.Filled.QuestionMark" Class="d-flex align-self-end">
                        <MudPaper Class="pa-6 d-flex flex-column" Elevation="3">
                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                            {
                                <MudImage Src="@item.ImageUrl" Fluid="true" Alt="image" Elevation="25" Class="rounded-lg" />
                            }
                            <MudText Typo="Typo.body1" Align="Align.End">
                                @item.Question
                            </MudText>
                            <MudText Typo="Typo.caption" Align="Align.End" Color="Color.Secondary">
                                @($"Asked at {item.CreatedDate:h:mm:ss tt}")
                            </MudText>
                        </MudPaper>
                    </MudBadge>
                    <div class="ten-twelves">
                        <MudBadge Origin="Origin.TopLeft" Overlap="true" Color="Color.Secondary"
                              Icon="@Icons.Material.Filled.AutoAwesome">
                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="12">
                                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
                                        <MudTabPanel Icon="@Icons.Material.Filled.Quickreply" Text="Answer" ToolTip="Answer text">
                                            <ChildContent>
                                                <MudPaper Class="pa-6" Elevation="3">
                                                    <MudText Typo="Typo.body1">
                                                        @((MarkupString)item.Answer)
                                                    </MudText>
                                                    @if (item is { Sources.Count: > 0 })
                                                    {
                                                        <div class="pt-4">
                                                            <MudText Typo="Typo.subtitle2" Class="pb-2">Citations:</MudText>
                                                            @foreach (var citation in item.Sources)
                                                            {
                                                                var icon = citation.Source.EndsWith(".pdf")
                                                                ? @Icons.Custom.FileFormats.FilePdf
                                                                : null;
                                                                <MudChip Variant="Variant.Text" Color="Color.Info"
                                                             Icon="@icon" OnClick="@(_ => OnShowCitation(citation.Link))">
                                                                    @citation.Source
                                                                </MudChip>
                                                            }
                                                        </div>
                                                    }
                                                   
                                                </MudPaper>
                                            </ChildContent>
                                        </MudTabPanel>
                                    </MudTabs>
                                </MudItem>
                            </MudGrid>
                        </MudBadge>
                    </div>
                </MudStack>
            }
        </MudStack>
        @if (_isReceivingResponse)
        {
            <div class="ten-twelves mt-2">

                <MudBadge Origin="Origin.TopLeft" Overlap="true" Color="Color.Secondary"
                      Icon="@Icons.Material.Filled.Lightbulb" Class="full-width">
                    <MudPaper Class="pa-6" Elevation="3">
                        <Loading />
                    </MudPaper>
                </MudBadge>
            </div>

        }
    </MudItem>
    <MudItem xs="12" Class="rounded">
        <MudGrid>
            <MudItem xs="12" lg="10">
                <MudBadge id="toggle-mic" Origin="Origin.TopRight" Color="Color.Primary"
                          Overlap=true Dot=false Bordered=false Icon="@Icons.Material.Filled.Mic"
                          Style="width:100%; cursor:pointer;">
                    <MudTextField @bind-Value="@_userQuestion" Label="Type your question here.."
                                  Variant="Variant.Outlined" Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.ChatBubble"
                                  AdornmentColor="Color.Secondary" AutoFocus="true"
                                  Placeholder="Type your question here.." Lines="5"
                                  IconSize="Size.Large"
                                  HelperText="Type your question here.." Immediate="true"
                                  OnKeyUp="@OnKeyUpAsync" Clearable="true"
                                  Counter="16_384" MaxLength="16_384" />
                </MudBadge>
            </MudItem>
            <MudItem xs="0" lg="2" Class="d-flex align-self-center">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="6" Class="pa-2">
                        <MudFab Color="Color.Secondary" Size="Size.Large"
                                StartIcon=@Icons.Material.Filled.Send 
                                Label="Chat" aria-label="Ask question button."
                                OnClick="@OnAskClickedAsync"
                                Disabled=@(_isReceivingResponse || string.IsNullOrWhiteSpace(_userQuestion)) />
                    </MudItem>
                    @if (IsAbleToUpload)
                    {
                        <MudItem xs="3" Class="pa-2">
                            <MudTooltip Arrow="true" Text="Upload Image" Placement="Placement.Top">
                            <MudFab Color="Color.Success" Size="Size.Medium"
                                    StartIcon=@Icons.Material.Filled.Upload
                                    aria-label="Upload Image."
                                    OnClick="@PickMedia" Disabled=@_isReceivingResponse />
                        </MudTooltip>
                        </MudItem>
                    }
                    <MudItem xs="3" Class="pa-2">
                        <MudTooltip Arrow="true" Text="Clear chat history" Placement="Placement.Top">
                            <MudFab Color="Color.Primary" Size="Size.Medium"
                                    StartIcon=@Icons.Material.Filled.DeleteForever
                                    aria-label="Clear chat."
                                    OnClick="@OnClearChat" Disabled=@_isReceivingResponse />
                        </MudTooltip>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudScrollToTop Selector="#answers"
                    VisibleCssClass="visible absolute"
                    HiddenCssClass="invisible">
        <MudFab Color="Color.Primary" IconSize="Size.Large" StartIcon="@Icons.Material.Filled.ArrowUpward" />
    </MudScrollToTop>
</MudGrid>
@code {
    public byte[] ImageData { get; set; }
    public string ImageName { get; set; }
    public string ImageUrl { get; set; }
    bool IsAbleToUpload { set; get; } = false;
    string Status = string.Empty;
    bool IsLoading = false;
    public List<RAGItem> Items { get; set; } = new();
    bool IsReversed = false;
    bool _isReceivingResponse = false;
    string _userQuestion;
    string _SelectedModel;
    string SelectedModel
    {
        set
        {
            var reset = _SelectedModel != value;
            _SelectedModel = value;
            if (_SelectedModel.Contains("vision"))
            {
                IsAbleToUpload = true;
            }
            else
            {
                IsAbleToUpload = false;
            }
            if (reset) Reset();
        }
        get { return _SelectedModel; }
    }
    List<string> infos = new();
    string SystemMessage { set; get; } = "you are a smart assistant.";
    protected override async Task OnInitializedAsync()
    {
        await Blob.Configure(AppConstants.BlobConn, AppConstants.ContainerName);
        SelectedModel = AppConstants.ModelOpenAIs.FirstOrDefault();
        await Reset();
    }
    public async Task PickMedia()
    {


        try
        {
            int size = -1;
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Title = "Open Image";
            openFileDialog1.Filter = "jpg files (*.jpg)|*.jpg|gif files (*.gif)|*.gif|png files (*.png)|*.png|jpeg files (*.jpeg)|*.jpeg|bmp files (*.bmp)|*.bmp";
            var result = openFileDialog1.ShowDialog(); // Show the dialog.
            if (result ==   System.Windows.Forms.DialogResult.OK) // Test result.
            {
                string file = openFileDialog1.FileName;
                try
                {


                    var ms = new MemoryStream(File.ReadAllBytes(file));                    
                    ImageData = GraphicsExtensions.ResizeImage(ms.ToArray(), 800);

                    var curDate = DateTime.Now;
                    ImageName = $"{curDate.Year}/{curDate.Month}/{Guid.NewGuid().ToString().Replace("-", "_")}{System.IO.Path.GetExtension(file)}"; //Path.GetFileName(result.FileName);
                    await Blob.UploadFiles(ImageData, ImageName);
                    ImageUrl = $"{AppConstants.BlobPrefix}{ImageName}";


                }
                catch (IOException)
                {
                }
            }
            else
            {
                infos.Add("Only support png, jpg, gif, bmp");
            }
            Console.WriteLine(size); // <-- Shows file size in debugging mode.
            Console.WriteLine(result); // <-- For debugging use.




        }
        catch (Exception ex)
        {
            // The user canceled or something went wrong
        }
    }
    async Task OnClearChat()
    {
        Items.Clear();
    }
    async Task OnShowCitation(string Link)
    {

    }
    async Task Reset()
    {
        ChatSvc.SetupOpenAI(SelectedModel, SystemMessage);
        Items.Clear();
        ImageName = string.Empty;
        ImageData = null;
        ImageUrl = string.Empty;
        infos.Add($"{DateTime.Now} - Chat is ready.");
        Snackbar.Add($"{DateTime.Now} - Chat is ready.", Severity.Info);
    }

    private async Task OnKeyUpAsync(KeyboardEventArgs args)
    {
        if (args is { Key: "Enter", ShiftKey: false })
        {
            await OnAskClickedAsync();
        }
    }
    async Task OnAskClickedAsync()
    {
        if (IsLoading) return;
        if (!AppConstants.InternetOK)
        {
            Snackbar.Add("Please check internet connection.", Severity.Error);
            return;

        }
        if (string.IsNullOrEmpty(_userQuestion))
        {
            Snackbar.Add("Please type a message first.", Severity.Warning);
            return;
        }
        _isReceivingResponse = true;
        try
        {
            var answer = string.Empty;
            if (ImageData != null && !string.IsNullOrEmpty(ImageUrl))
            {
                //upload
                answer = await ChatSvc.Chat(_userQuestion, ImageUrl);
            }
            else
            {
                answer = await ChatSvc.Chat(_userQuestion);
            }
            
            Console.WriteLine("Sources:\n");
            var res = answer;

         
            var newItem = new RAGItem() { Answer = res, CreatedDate = DateTime.Now, Question = _userQuestion, ImageUrl = ImageUrl };
            /*
            //only for debug
            foreach (var x in answer.RelevantSources)
            {
                newItem.Sources.Add(new SourceItem() { Link = x.Link, Source = x.SourceName });
                Console.WriteLine($"  - {x.SourceName}  - {x.Link} [{x.Partitions.First().LastUpdate:D}]");
            }*/
            //Console.WriteLine($"Question: {_userQuestion}\n\nAnswer: {answer}");
            Items.Add(newItem);
            _userQuestion = string.Empty;
            ImageUrl = string.Empty;
            ImageName = string.Empty;
            ImageData = null;

        }
        catch (Exception ex)
        {
            Snackbar.Add("error answer question:" + ex, Severity.Warning);
            Console.WriteLine( "error answer question:"+ex);

        }
        finally
        {
            _isReceivingResponse = false;
        }
    }

  
}
